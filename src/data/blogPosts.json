[
  {
    "id": 1,
    "slug": "my-first-portfolio",
    "title": "How I Built My First Fully Functional Portfolio Website for a Hairdresser",
    "date": "19 Sep, 2024",
    "shortContent": "Sharing my experience building a fully functional portfolio website for a hairdresser, covering requirements gathering, design, and backend implementation. This project allowed me to apply skills in React, CSS modules, responsive design, and Node.js.",
    "content": "In this blog post, I'd like to share my experience of building my first full-functional portfolio website for a hairdresser. The process involved several stages: from gathering requirements to implementing the backend. This project was not only a technical challenge but also a great opportunity to apply my knowledge of React, CSS modules, responsive design, and Node.js.\n\n### 1. Gathering Requirements and Planning\nThe project began with a discussion with my client, Taisiya, a hairdresser, to understand her vision for the website. The key requirements were:\n- A stylish and modern design.\n- Pages for services, prices, and contact information.\n- A booking form for clients.\n- The ability to add client reviews.\n\n### 2. Structure and Design\nI decided to use React as the main framework for the frontend due to its flexibility and the ability to organize components easily. For styling, I used CSS modules to ensure that each component had isolated styles.\n\nThe main structure of the website included the following pages:\n- Home (featuring a welcome text and key services).\n- About Us (the hairdresser's story, philosophy, and a photo).\n- Services (a detailed list of services with prices).\n- Gallery (a showcase of the hairdresser's work).\n- Contact (a booking form and contact details).\n\n### 3. Responsiveness and UX/UI\nTo create a responsive design, I utilized Flexbox and CSS Grid, allowing for easy layout adjustments across different screen sizes. I paid special attention to the mobile version, adding a hamburger menu and a two-row layout for filters on the gallery page. This improved the user experience on smartphones.\n\n### 4. Client Booking Form\nOne of the key features of the site was the booking form for scheduling services. I used the Yup library for form validation, ensuring proper data input from the user. The form fields included name, phone number, selected service, and time. Once completed, the form data was submitted to the backend.\n\n### 5. Backend and Database\nTo implement the functionality for client reviews and booking, I used Node.js and MongoDB. The form data was sent to the backend, processed, and stored in the database. This provided a system for handling client bookings and reviews.\n\n### 6. Deployment\nThe final step was deploying the site using Vercel, which made it easy to integrate the frontend and ensure stable website performance.\n\n### Conclusion\nThis project gave me valuable experience working with a real client, helped me improve my technical skills, and provided insights into building a full-functional website. In the future, I plan to add more features, such as Google Calendar integration for bookings and a user authentication system for clients. This experience highlighted the importance of proper project structure planning, considering UX/UI, and ensuring usability across all devices.",
    "imageUrl": "/images/blogs/post-one.jpg"
  },
  {
    "id": 2,
    "slug": "my-journey-in-web-development",
    "title": "My Journey in Web Development: From Beginner to Frontend Developer",
    "date": "1 Oct, 2024",
    "shortContent": "Sharing my journey into web development, from my early steps to where I am today. This field has proven challenging yet fascinating, requiring not only technical skills but continuous learning and growth.",
    "content": "In this blog, I want to share my journey into the world of web development. As a beginner, I had no idea how challenging yet fascinating this process would be. Web development is not just about technical skills but also about continuous learning and improvement. Here's how I went from my first steps to where I am today.\n\n### 1. First Steps: HTML and CSS\nMy journey started with learning HTML and CSS. These were the basics that formed the foundation of understanding how the web works. At first, it was difficult, but gradually I learned how to structure pages and make them both beautiful and functional.\n\nI began with simple static web pages:\n- Creating headings, paragraphs, and lists.\n- Using styles to position elements, change colors, fonts, and create basic layouts.\n\nCSS modules became a great way for me to isolate styles for different components, which made my projects more organized and scalable.\n\n### 2. JavaScript: Moving to Interactivity\nAfter mastering HTML and CSS, I decided to learn JavaScript, the programming language that makes web pages interactive. I started with the basics:\n- Variables, conditions, and loops.\n- Functions and event handling.\n- Working with the DOM (Document Object Model) to manipulate page elements.\n\nThis was a significant step as I learned how to add interactivity to web pages by modifying them in real-time.\n\n### 3. Frameworks: React\nAfter getting comfortable with basic JavaScript, I discovered React, a popular JavaScript framework for building complex user interfaces. React opened up new possibilities for me:\n- **Components**: enabling the creation of reusable UI elements.\n- **JSX**: a convenient syntax for combining JavaScript and HTML.\n- **States and props**: helping manage data and user interactions.\n\nReact became my primary tool. I started creating larger and more complex applications, learning to work with libraries and APIs.\n\n### 4. Tools and Modern Technologies\nAs I progressed, I started exploring other tools and technologies that help in building web applications:\n- **Webpack**: for bundling and configuring projects.\n- **Babel**: for using modern JavaScript features.\n- **ESLint**: for maintaining high code quality.\n- **Git**: for version control.\n- **CSS frameworks (Bootstrap, Tailwind CSS)**: for quickly creating beautiful and responsive interfaces.\n\nThese tools became an essential part of my workflow.\n\n### 5. Working with Backend and Databases\nAlthough I focused on frontend development, I became interested in how the backend works. I started learning Node.js and Express.js to build simple servers. This gave me an understanding of how server requests work, how to interact with databases (I chose MongoDB), and how to handle data on the server side.\n\n### 6. Practice and Projects\nThe most important learning came from practice. I created various projects:\n- A personal website for a hairdresser (where I applied React and responsive design).\n- A blog where I could practice interactive elements.\n- Other freelance projects where I had the opportunity to work with real clients and learn to work in a team.\n\nThis hands-on experience helped me gain practical knowledge and understand how web development works in the real world.\n\n### 7. Never Stop Learning\nA crucial part of my development was realizing that web development is an ongoing learning process. New technologies, frameworks, and libraries emerge every day. It's important to keep improving your skills, learning new tools, and never being afraid to experiment.\n\n### Key Takeaways\nMy journey in web development has been challenging but exciting. From the beginning, when I didn't even know how to create a simple page, to the point where I started working on larger projects, I've learned many valuable lessons. Web development is a continuous process, and I'm excited to continue my journey in this field.",
    "imageUrl": "/images/blogs/post-two.jpg"
  },
  {
    "id": 3,
    "slug": "practical-project-breakdown-solving-technical-challenges",
    "title": "Practical Project Breakdown: Solving Technical Challenges",
    "date": "18 Oct, 2024",
    "shortContent": "In this post, I'll break down projects I've tackled, highlighting how I approached and solved various technical challenges. These examples showcase effective tools and methods for handling development issues.",
    "content": "In this post, I'll break down several projects I've worked on and explain how I approached and solved different technical challenges. Practical examples like these help demonstrate how to tackle development issues and which tools or methods can come in handy.\n\n### 1. Portfolio Website for a Hairdresser\n**Project:** Creating a portfolio website for a hairdresser where clients can view services, book appointments, and browse a gallery of work.\n\n**Technical Challenge:** Responsive Navigation Menu  \nOne of the key challenges was designing a responsive menu that would work well on both mobile and desktop devices.\n\n**Solution:** I used useRef in React to implement a dropdown menu that appears when clicking on the hamburger icon in mobile view. This menu also needed to close when the user clicked outside of it, so I added event listeners to detect clicks outside the menu.\n\n**Problem:** Initially, the menu was not closing properly when users clicked multiple times in quick succession.\n\n**Fix:** I added logic to debounce the clicks, ensuring smooth functionality and preventing multiple clicks from interfering with the menu.\n\n### 2. Booking Form\n**Project:** A form where clients can submit a booking request by entering their name, phone number, and selecting a service.\n\n**Technical Challenge:** Form Validation  \nThe form required proper validation to ensure users submitted valid data before sending it to the server.\n\n**Solution:** I used the Yup library to create a validation schema. This made it easy to define validation rules for each field (e.g., checking for a valid email format or required fields).\n\n**Problem:** The form initially did not provide detailed feedback about input errors, making it hard for users to understand what went wrong.\n\n**Fix:** I customized the error messages for each field to provide clearer feedback, enhancing the user experience.\n\n### 3. Working with an API for Reviews\n**Project:** Implementing a review system where clients can leave feedback about services, and the admin can moderate those reviews.\n\n**Technical Challenge:** Dynamic Data Loading  \nI needed to integrate an API to fetch and display reviews dynamically when the page loaded.\n\n**Solution:** I used the fetch API to pull data from the server and displayed it in a component that renders the reviews.\n\n**Problem:** Sometimes the data would load too quickly or too slowly, which caused an issue with the display.\n\n**Fix:** I implemented a loading spinner to show feedback while the data loaded and added error handling in case the data could not be retrieved.\n\n### Conclusion\nThese projects helped me learn valuable problem-solving skills in web development. Breaking down each task and applying the right tools allowed me to overcome technical challenges and enhance the functionality of each project. I look forward to applying these skills to future projects and continually improving as a developer.",
    "imageUrl": "/images/blogs/post-three.jpg"
  }
]
